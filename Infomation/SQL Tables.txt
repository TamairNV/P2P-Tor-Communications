CREATE DATABASE p2p_communication;
USE p2p_communication;

-- Minimal version
CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    username VARCHAR(32) UNIQUE NOT NULL,
);

Create Table Password{
    user_id UUID PRIMARY KEY,
    salt VARCHAR(16) NOT NULL,
}

CREATE TABLE onion_keys (
    user_id UUID REFERENCES users(user_id),
    onion_address VARCHAR(62) NOT NULL,
    public_key BLOB NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE message(
    sender_id UUID REFERENCES users(user_id)ON DELETE CASCADE,
    receiver_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    send_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    message BLOB NOT NULL,
    PRIMARY KEY (sender_id, receiver_id)
)

-- Friend Relationships (bidirectional)
CREATE TABLE Friend (
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    friend_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, friend_id),
    CHECK (user_id < friend_id)  -- Ensures no duplicate reciprocal entries
);
CREATE TABLE FriendRequest (
    request_id UUID PRIMARY KEY NOT NULL,
    sender_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    recipient_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    status VARCHAR(20) NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CHECK (sender_id != recipient_id),  -- Prevent self-requests
    CHECK (status IN ('pending', 'accepted', 'rejected', 'withdrawn'))
);

CREATE TABLE GroupChat (
    ID UUID PRIMARY KEY NOT NULL,
    name VARCHAR(64) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE GroupChatMember (
    ID UUID PRIMARY KEY NOT NULL,
    group_id UUID NOT NULL REFERENCES GroupChat(ID) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    member_type ENUM('Owner', 'Admin', 'Member', 'Viewer') DEFAULT 'Member',
    UNIQUE(group_id, user_id)
);

CREATE TABLE GroupChatMessage(
    ID UUID PRIMARY KEY NOT NULL,
    group_id UUID NOT NULL REFERENCES GroupChat(ID) ON DELETE CASCADE,
    sender_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    message BLOB NOT NULL,
);

CREATE TABLE EncryptedGroupChatMessage(
    ID UUID PRIMARY KEY NOT NULL,
    message_id UUID NOT NULL REFERENCES GroupChatMessage(ID) ON DELETE CASCADE,
    receiver_id UUID NOT NULL REFERENCES GroupChatMember(ID) ON DELETE CASCADE,
    UNIQUE(message_id, receiver_id)
);

-- Create indexes for performance
CREATE INDEX idx_group_member ON GroupChatMember(group_id);
CREATE INDEX idx_group_message ON GroupChatMessage(group_id);
CREATE INDEX idx_encrypted_message ON EncryptedGroupChatMessage(receiver_id);

-- Indexes for performance
CREATE INDEX idx_friend_user ON Friend(user_id);
CREATE INDEX idx_friend_pair ON Friend(user_id, friend_id);
CREATE INDEX idx_request_sender ON FriendRequest(sender_id);
CREATE INDEX idx_request_recipient ON FriendRequest(recipient_id);

DELIMITER //
CREATE PROCEDURE AcceptFriendRequest(
    IN current_user_uuid UUID,
    IN friend_username VARCHAR(32)
)
BEGIN
    DECLARE friend_uuid UUID;
    DECLARE min_uuid UUID;
    DECLARE max_uuid UUID;
    DECLARE request_exists INT DEFAULT 0;

    START TRANSACTION;

    -- Get friend's UUID from username (fixed from original query)
    SELECT user_id INTO friend_uuid
    FROM users
    WHERE username = friend_username
    LIMIT 1;

    -- Check for existing pending request in either direction
    SELECT COUNT(*) INTO request_exists
    FROM FriendRequest
    WHERE (
        (sender_id = current_user_uuid AND recipient_id = friend_uuid) OR
        (sender_id = friend_uuid AND recipient_id = current_user_uuid)
    )
    AND status = 'pending';

    IF friend_uuid IS NOT NULL AND request_exists > 0 THEN
        -- Order UUIDs to satisfy Friend table constraint
        IF current_user_uuid < friend_uuid THEN
            SET min_uuid = current_user_uuid;
            SET max_uuid = friend_uuid;
        ELSE
            SET min_uuid = friend_uuid;
            SET max_uuid = current_user_uuid;
        END IF;

        -- Create friendship
        INSERT IGNORE INTO Friend (user_id, friend_id)
        VALUES (min_uuid, max_uuid);

        -- Update all related requests (both directions)
        UPDATE FriendRequest
        SET status = 'accepted',
            updated_at = CURRENT_TIMESTAMP
        WHERE (
            (sender_id = current_user_uuid AND recipient_id = friend_uuid) OR
            (sender_id = friend_uuid AND recipient_id = current_user_uuid)
        );

        COMMIT;
    ELSE
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid friend request or user not found';
    END IF;
END//
DELIMITER ;



DELIMITER //
CREATE PROCEDURE RejectFriendRequest(
    IN current_user_uuid UUID,
    IN friend_username VARCHAR(32))
BEGIN
    DECLARE friend_uuid UUID;
    DECLARE existing_request INT DEFAULT 0;

    START TRANSACTION;

    -- Get friend's UUID from username with validation
    SELECT u.user_id INTO friend_uuid
    FROM users u
    WHERE u.username = friend_username
    LIMIT 1;

    -- Verify pending request exists where user is recipient
    SELECT COUNT(*) INTO existing_request
    FROM FriendRequest fr
    WHERE fr.sender_id = friend_uuid
      AND fr.recipient_id = current_user_uuid
      AND fr.status = 'pending';

    IF friend_uuid IS NOT NULL AND existing_request > 0 THEN
        -- Update request and any potential duplicates
        UPDATE FriendRequest
        SET status = 'rejected',
            updated_at = CURRENT_TIMESTAMP
        WHERE sender_id = friend_uuid
          AND recipient_id = current_user_uuid
          AND status = 'pending';

        COMMIT;
    ELSE
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No pending request found from this user';
    END IF;
END//
DELIMITER ;

-- Update users table (safe migration)
ALTER TABLE users
ADD COLUMN is_online BOOLEAN NOT NULL DEFAULT FALSE,
ADD COLUMN last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

-- Create optimized index for presence checks
CREATE INDEX idx_user_presence ON users(is_online, last_seen);

DELIMITER //
CREATE OR REPLACE PROCEDURE register_user(
    IN p_user_id UUID,
    IN p_username VARCHAR(32),
    IN p_onion_addr VARCHAR(62),
    IN p_pubkey BLOB,
    IN p_salt VARCHAR(16)
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

    START TRANSACTION;
    INSERT INTO users (user_id, username) VALUES (p_user_id, p_username);
    INSERT INTO onion_keys (user_id, onion_address, public_key, last_updated)
    VALUES (p_user_id, p_onion_addr, p_pubkey, NOW());
    INSERT INTO password (user_id, salt) VALUES (p_user_id, p_salt);
    COMMIT;
END //
DELIMITER ;







DELIMITER //
CREATE OR REPLACE PROCEDURE create_group_chat(
    IN group_chat_id UUID,
    IN group_chat_name VARCHAR(64),
    IN user_ids TEXT,  -- Comma-separated list of user IDs
    IN UUIDs TEXT
)
BEGIN



    DECLARE current_pos INT DEFAULT 1;
    DECLARE next_pos INT;
    DECLARE current_id VARCHAR(100);
    DECLARE current_UUID UUID;
    DECLARE ids_length INT;
    DECLARE lastID UUID;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    -- Calculate length of the string
    SET ids_length = LENGTH(user_ids);
    -- create group chat
    INSERT INTO GroupChat(ID,name) VALUES(group_chat_id,group_chat_name);

    -- Loop through comma-separated values
    WHILE current_pos <= ids_length DO
        -- Find next comma position
        SET next_pos = LOCATE(',', user_ids, current_pos);

        IF next_pos = 0 THEN
            SET next_pos = ids_length + 1;
        END IF;

        -- Extract current ID
        SET current_id = SUBSTRING(user_ids, current_pos, next_pos - current_pos);
        SET current_UUID = SUBSTRING(UUIDs, current_pos, next_pos - current_pos);

        -- Trim whitespace
        SET current_id = TRIM(current_id);

        -- Only insert if ID is not empty
        IF current_id != '' THEN
            INSERT INTO GroupChatMember (ID,group_id, user_id,joined_at)
            VALUES (current_UUID, group_chat_id, current_id, NOW());
        END IF;

        -- Move to next position
        SET current_pos = next_pos + 1;
    END WHILE;


    -- Get the last user ID from the user_ids string using SUBSTRING_INDEX
    -- SUBSTRING_INDEX(string, delimiter, count) with count = -1 returns
    -- everything after the last delimiter.
    SET @last_user_id_str = SUBSTRING_INDEX(user_ids, ',', -1);

    -- Update the member_type for the last user ID to 'Owner'
    -- Ensure @last_user_id_str is not empty before updating
    IF @last_user_id_str != '' THEN
        UPDATE GroupChatMember
        SET member_type = 'Owner'
        WHERE group_id = group_chat_id AND
              user_id = @last_user_id_str; -- Compare with the extracted string value
    END IF;


    COMMIT;
END //

DELIMITER ;




CREATE TABLE messageRead(
    ID INT AUTO_INCREMENT primary key,
    group_chat_id UUID NOT NULL REFERENCES groupchat(ID),
    reader UUID NOT NULL REFERENCES users(user_id),
    message_id UUID REFERENCES groupchatmessage(ID),
    is_read boolean default 0,
    read_at TIMESTAMP default NOW()

)

DELIMITER //
CREATE OR REPLACE PROCEDURE send_message(
    IN message_id UUID,
    IN group_id UUID,
    IN sender_id UUID,
    IN messageJson BLOB
)
BEGIN

    DECLARE member_number INT;
    DECLARE i INT default 0;
    DECLARE current_reader UUID;



    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

    INSERT INTO groupchatmessage (ID,group_id,sender_id,message) VALUES (message_id,group_id,sender_id,messageJson);

    SET member_number = (SELECT COUNT(ID) FROM groupchatmember gcm WHERE gcm.group_id = group_id);
    WHILE i < member_number DO
        SET current_reader =
            (SELECT user_id FROM groupchatmember gcm
                       WHERE gcm.group_id = group_id ORDER BY ID LIMIT 1 OFFSET i);
        SELECT current_reader;
        INSERT INTO messageread (group_chat_id,reader)
        VALUES (group_id,current_reader);
        SET i = i + 1;
    END WHILE;

    UPDATE messageread
    SET is_read = 1
    WHERE reader = sender_id AND group_chat_id = group_id;

    COMMIT;
END //

DELIMITER ;





DELIMITER //

CREATE OR REPLACE PROCEDURE remove_read_group_chat_messages(
    IN p_group_id UUID
)
BEGIN
    -- Step 1: Delete messages where all recipients have read them
    DELETE FROM groupchatmessage
    WHERE group_id = p_group_id
    AND NOT EXISTS (
        SELECT 1 FROM messageread
        WHERE message_id = groupchatmessage.id
        AND is_read = 0
    );

    -- Step 2: Clean up any orphaned read records (optional)
    DELETE FROM messageread
    WHERE NOT EXISTS (
        SELECT 1 FROM groupchatmessage
        WHERE id = messageread.message_id
    );
END //

DELIMITER ;



